generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_DATABASE_URL")
}

model Company {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  companyName  String
  description  String
  industry     String
  size         String
  location     String
  website      String
  type         String
  companyImage String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Job       Job[]
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId

  @@map("companies")
}

model Job {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  benefits          String[]
  description       String
  employmentType    String
  location          String
  maxSalary         Int
  minSalary         Int
  requirements      String[]
  title             String
  applicationMethod String
  expiryDate        DateTime
  applyLink         String
  highlights        String[]
  industry          String
  companyId         String   @db.ObjectId
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId

  @@map("jobs")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Company       Company[]
  Job           Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
